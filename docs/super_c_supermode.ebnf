// Super C language super mode grammar
//
// W3C's EBNF notation https://www.w3.org/TR/2008/REC-xml-20081126/#sec-notation
// Generate diagram at https://www.bottlecaps.de/rr/ui

//STARTING RULES
SourceFile    ::= TopLevelDecl+ EOF

//DECLARATIONS
TopLevelDecl  ::= FunctionDecl

//.Function declarations
FunctionDecl  ::= "fn" identifer GenericParameters? Signature GenericConstraints? FunctionBody?
FunctionBody  ::= Block | "=" Expression

//.Generic parameters
GenericParameters ::= "$" "(" identifer ("," identifier)* ")" 
GenericConstraints ::= "if" Expression

//TYPES

//.Function types
FunctionType  ::= "fn" Signature
Signature     ::= Parameters Result?
Result        ::= "->" Type
Parameters    ::= "(" (Parameter ("," Parameter)*)? ")"
Parameter     ::= identifier (":" | "::") Type



//STATEMENTS
Block         ::= "{" Statements "}"
Statements    ::= (Statement (";"+ Statement)*)? ";"*
Statement     ::= ReturnStmt

ReturnStmt    ::= "return" Expression? 

//EXPRESSIONS
Expression    ::= UnaryExpr | Expression binary_op Expression
UnaryExpr     ::= PrimaryExpr | unary_op UnaryExpr

PrimaryExpr   ::= Operand 
Operand       ::= literal



//LEXICAL STRUCTURE

//.letters and digits
newline        ::= // the Unicode code point U+000A
unicode_char   ::= // an arbitrary Unicode code point except newline
unicode_letter ::= // a Unicode code point categorized as "Letter"
unicode_digit  ::= // a Unicode code point categorized as "Number, decimal digit"
digit          ::= [0-9]

letter         ::= unicode_letter | "_"

//.Comments
// Line comments start with the character sequence // and stop at the end of the line
// General comments start with the character sequence /* and stop with the first subsequent character sequence */

//.Tokens

identifier ::= letter (letter | unicode_digit)*

keyword    ::= "fn" 
             | "return" 

punctuator ::= "{" 
             | "}"
             | ";"

literal    ::= BasicLit
BasicLit   ::= int_lit 
int_lit    ::= decimal_lit | binary_lit | octal_lit | hex_lit
decimal_lit     ::= [1-9] ("'"? digit)*
